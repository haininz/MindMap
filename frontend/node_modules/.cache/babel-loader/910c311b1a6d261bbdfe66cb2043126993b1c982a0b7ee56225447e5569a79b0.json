{"ast":null,"code":"var _jsxFileName = \"/Users/hainingzhou/VSCodeProjects/DrLambdaProj/frontend/src/MindMap.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  data\n}) => {\n  _s();\n  const domNode = useRef(null);\n  useEffect(() => {\n    if (!data) return;\n    const nodes = new DataSet([{\n      id: 1,\n      label: data.main_topic,\n      color: '#f0a30a',\n      shape: 'ellipse',\n      size: 30\n    }, ...data.subtopics.map((subtopic, index) => ({\n      id: index + 2,\n      label: subtopic,\n      color: '#7cbb00',\n      shape: 'box',\n      size: 25\n    }))]);\n    const edges = data.subtopics.map((subtopic, index) => ({\n      from: 1,\n      to: index + 2,\n      arrows: 'to'\n    }));\n    const options = {\n      nodes: {\n        borderWidth: 2,\n        borderWidthSelected: 4,\n        font: {\n          size: 16\n        }\n      },\n      edges: {\n        color: 'lightgray',\n        smooth: true\n      },\n      layout: {\n        hierarchical: {\n          direction: \"UD\",\n          sortMethod: \"directed\",\n          levelSeparation: 150,\n          nodeSpacing: 150\n        }\n      },\n      physics: false,\n      interaction: {\n        hover: true\n      }\n    };\n    const network = new Network(domNode.current, {\n      nodes,\n      edges\n    }, options);\n    return () => {\n      network.destroy();\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: domNode,\n    style: {\n      height: '800px',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n};\n_s(MindMap, \"oMeNP8Y0LBP7p8Tz/f0Pw3T8oxI=\");\n_c = MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["MindMap","data","_s","domNode","useRef","useEffect","nodes","DataSet","id","label","main_topic","color","shape","size","subtopics","map","subtopic","index","edges","from","to","arrows","options","borderWidth","borderWidthSelected","font","smooth","layout","hierarchical","direction","sortMethod","levelSeparation","nodeSpacing","physics","interaction","hover","network","Network","current","destroy","_jsxDEV","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hainingzhou/VSCodeProjects/DrLambdaProj/frontend/src/MindMap.js"],"sourcesContent":["const MindMap = ({ data }) => {\n    const domNode = useRef(null);\n\n    useEffect(() => {\n        if (!data) return;\n\n        const nodes = new DataSet([\n            { id: 1, label: data.main_topic, color: '#f0a30a', shape: 'ellipse', size: 30 },\n            ...data.subtopics.map((subtopic, index) => ({\n                id: index + 2,\n                label: subtopic,\n                color: '#7cbb00',\n                shape: 'box',\n                size: 25\n            }))\n        ]);\n\n        const edges = data.subtopics.map((subtopic, index) => ({\n            from: 1,\n            to: index + 2,\n            arrows: 'to'\n        }));\n\n        const options = {\n            nodes: {\n                borderWidth: 2,\n                borderWidthSelected: 4,\n                font: { size: 16 }\n            },\n            edges: {\n                color: 'lightgray',\n                smooth: true\n            },\n            layout: {\n                hierarchical: {\n                    direction: \"UD\",\n                    sortMethod: \"directed\",\n                    levelSeparation: 150,\n                    nodeSpacing: 150\n                }\n            },\n            physics: false,\n            interaction: { hover: true }\n        };\n\n        const network = new Network(domNode.current, { nodes, edges }, options);\n\n        return () => {\n            network.destroy();\n        };\n    }, [data]);\n\n    return <div ref={domNode} style={{ height: '800px', width: '100%' }} />;\n};\n"],"mappings":";;;AAAA,MAAMA,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1B,MAAMC,OAAO,GAAGC,MAAM,CAAC,IAAI,CAAC;EAE5BC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACJ,IAAI,EAAE;IAEX,MAAMK,KAAK,GAAG,IAAIC,OAAO,CAAC,CACtB;MAAEC,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAER,IAAI,CAACS,UAAU;MAAEC,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAG,CAAC,EAC/E,GAAGZ,IAAI,CAACa,SAAS,CAACC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;MACxCT,EAAE,EAAES,KAAK,GAAG,CAAC;MACbR,KAAK,EAAEO,QAAQ;MACfL,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,KAAK;MACZC,IAAI,EAAE;IACV,CAAC,CAAC,CAAC,CACN,CAAC;IAEF,MAAMK,KAAK,GAAGjB,IAAI,CAACa,SAAS,CAACC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;MACnDE,IAAI,EAAE,CAAC;MACPC,EAAE,EAAEH,KAAK,GAAG,CAAC;MACbI,MAAM,EAAE;IACZ,CAAC,CAAC,CAAC;IAEH,MAAMC,OAAO,GAAG;MACZhB,KAAK,EAAE;QACHiB,WAAW,EAAE,CAAC;QACdC,mBAAmB,EAAE,CAAC;QACtBC,IAAI,EAAE;UAAEZ,IAAI,EAAE;QAAG;MACrB,CAAC;MACDK,KAAK,EAAE;QACHP,KAAK,EAAE,WAAW;QAClBe,MAAM,EAAE;MACZ,CAAC;MACDC,MAAM,EAAE;QACJC,YAAY,EAAE;UACVC,SAAS,EAAE,IAAI;UACfC,UAAU,EAAE,UAAU;UACtBC,eAAe,EAAE,GAAG;UACpBC,WAAW,EAAE;QACjB;MACJ,CAAC;MACDC,OAAO,EAAE,KAAK;MACdC,WAAW,EAAE;QAAEC,KAAK,EAAE;MAAK;IAC/B,CAAC;IAED,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAClC,OAAO,CAACmC,OAAO,EAAE;MAAEhC,KAAK;MAAEY;IAAM,CAAC,EAAEI,OAAO,CAAC;IAEvE,OAAO,MAAM;MACTc,OAAO,CAACG,OAAO,CAAC,CAAC;IACrB,CAAC;EACL,CAAC,EAAE,CAACtC,IAAI,CAAC,CAAC;EAEV,oBAAOuC,OAAA;IAAKC,GAAG,EAAEtC,OAAQ;IAACuC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3E,CAAC;AAAC9C,EAAA,CArDIF,OAAO;AAAAiD,EAAA,GAAPjD,OAAO;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}